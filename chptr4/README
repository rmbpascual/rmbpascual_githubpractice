4 Git on the Server - The Protocols
The Protocols
Git can use four major protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git. Here we’ll discuss 
what they are and in what basic circumstances you would want (or not want) to use them.

Local Protocol
The most basic is the Local protocol, in which the remote repository is in another directory on disk. This is 
often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely 
case that everyone logs in to the same computer. The latter wouldn’t be ideal, because all your code repository 
instances would reside on the same computer, making a catastrophic loss much more likely.

The Pros
The pros of file-based repositories are that they’re simple and they use existing file permissions and network 
access. If you already have a shared filesystem to which your whole team has access, setting up a repository is 
very easy. You stick the bare repository copy somewhere everyone has shared access to and set the read/write 
permissions as you would for any other shared directory. We’ll discuss how to export a bare repository copy for 
this purpose in “Getting Git on a Server” 
(http://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server#_git_on_the_server).

The Cons
The cons of this method are that shared access is generally more difficult to set up and reach from multiple 
locations than basic network access. If you want to push from your laptop when you’re at home, you have to mount 
the remote disk, which can be difficult and slow compared to network-based access.

The HTTP Protocols
Git can communicate over HTTP in two different modes. Prior to Git 1.6.6 there was only one way it could do this 
which was very simple and generally read-only. In version 1.6.6 a new, smarter protocol was introduced that 
involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH. 
In the last few years, this new HTTP protocol has become very popular since it’s simpler for the user and smarter 
about how it communicates. The newer version is often referred to as the “Smart” HTTP protocol and the older way 
as “Dumb” HTTP. We’ll cover the newer “smart” HTTP protocol first.

Smart HTTP
The “smart” HTTP protocol operates very similarly to the SSH or Git protocols but runs over standard HTTP/S ports 
and can use various HTTP authentication mechanisms, meaning it’s often easier on the user than something like SSH, 
since you can use things like username/password basic authentication rather than having to set up SSH keys.

In fact, for services like GitHub, the URL you use to view the repository online (for example, “https://github.com/schacon/simplegit”) 
is the same URL you can use to clone and, if you have access, push over.

Dumb HTTP
If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler 
“dumb” HTTP protocol. The Dumb protocol expects the bare Git repository to be served like normal files from the web 
server. The beauty of the Dumb HTTP protocol is the simplicity of setting it up. Basically, all you have to do is 
put a bare Git repository under your HTTP document root and set up a specific post-update hook, and you’re done 
(See “Git Hooks”) (http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_git_hooks). At that point, anyone who 
can access the web server under which you put the repository can also clone your repository.

The Pros
The simplicity of having a single URL for all types of access and having the server prompt only when authentication 
is needed makes things very easy for the end user. Being able to authenticate with a username and password is also
a big advantage over SSH, since users don’t have to generate SSH keys locally and upload their public key to the 
server before being able to interact with it. For less sophisticated users, or users on systems where SSH is less 
common, this is a major advantage in usability. It is also a very fast and efficient protocol, similar to the SSH one.

The Cons
Git over HTTP/S can be a little more tricky to set up compared to SSH on some servers. Other than that, there is very 
little advantage that other protocols have over the “Smart” HTTP protocol for serving Git

The SSH Protocol
A common transport protocol for Git when self-hosting is over SSH. This is because SSH access to servers is already
set up in most places – and if it isn’t, it’s easy to do. SSH is also an authenticated network protocol; and because 
it’s ubiquitous, it’s generally easy to set up and use.

The Git Protocol
Next is the Git protocol. This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) 
that provides a service similar to the SSH protocol, but with absolutely no authentication. In order for a repository 
to be served over the Git protocol, you must create the git-daemon-export-ok file – the daemon won’t serve a repository 
without that file in it – but other than that there is no security. Either the Git repository is available for everyone 
to clone or it isn’t. This means that there is generally no pushing over this protocol. You can enable push access; but 
given the lack of authentication, if you turn on push access, anyone on the internet who finds your project’s URL could 
push to your project. Suffice it to say that this is rare.

Getting Git on a Server
Here we’ll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux based server,
though it’s also possible to run these services on Mac or Windows servers too. Actually setting up a production server 
within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully 
this will give you the general idea of what’s involved.

Putting the Bare Repository on a Server
Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.
Let’s say you’ve set up a server called git.example.com that you have SSH access to, and you want to store all your Git
repositories under the /opt/git directory. 

Small Setups
If you’re a small outfit or are just trying out Git in your organization and have only a few developers, things can be 
simple for you. One of the most complicated aspects of setting up a Git server is user management. If you want some 
repositories to be read-only to certain users and read/write to others, access and permissions can be a bit more difficult 
to arrange.

Generating Your SSH Public Key
That being said, many Git servers authenticate using SSH public keys. In order to provide a public key, each user in your 
system must generate one if they don’t already have one. This process is similar across all operating systems. First, you 
should check to make sure you don’t already have a key. By default, a user’s SSH keys are stored in that user’s ~/.ssh 
directory

Git Daemon
If you’re running this on a server outside your firewall, it should only be used for projects that are publicly visible 
to the world. If the server you’re running it on is inside your firewall, you might use it for projects that a large 
number of people or computers (continuous integration or build servers) have read-only access to, when you don’t want 
to have to add an SSH key for each.

Smart HTTP
We now have authenticated access though SSH and unauthenticated access through git://, but there is also a protocol that 
can do both at the same time. Setting up Smart HTTP is basically just enabling a CGI script that is provided with Git called 
git-http-backend on the server. This CGI will read the path and headers sent by a git fetch or git push to an HTTP URL and 
determine if the client can communicate over HTTP (which is true for any client since version 1.6.6). If the CGI sees that 
the client is smart, it will communicate smartly with it, otherwise it will fall back to the dumb behavior (so it is backward 
compatible for reads with older clients).

For more information on configuring authentication in Apache, check out the Apache docs here: 
http://httpd.apache.org/docs/current/howto/auth.html

GitLab
GitWeb is pretty simplistic though. If you’re looking for a more modern, fully featured Git server, there are some several 
open source solutions out there that you can install instead. As GitLab is one of the more popular ones, we’ll cover 
installing and using it as an example. This is a bit more complex than the GitWeb option and likely requires more maintenance,
but it is a much more fully featured option.

Summary
You have several options to get a remote Git repository up and running so that you can collaborate with others or share your work.

Running your own server gives you a lot of control and allows you to run the server within your own firewall, but such a server
generally requires a fair amount of your time to set up and maintain. If you place your data on a hosted server, it’s easy to set 
up and maintain; however, you have to be able to keep your code on someone else’s servers, and some organizations don’t allow that.

It should be fairly straightforward to determine which solution or combination of solutions is appropriate for you and your 
organization.
