3 Git Branching - Branches in a Nutshell

Branching means diverging from the main line of development and continue on working without messing the main files.

When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This 
object also contains the author’s name and email, the message that you typed, and pointers to the commit or commits that 
directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, 
and multiple parents for a commit that results from a merge of two or more branches.

A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is master. As 
you start making commits, you’re given a master branch that points to the last commit you made. Every time you commit, it moves 
forward automatically.

The “master” branch in Git is not a special branch. It is exactly like any other branch. The only reason nearly every repository 
has one is that the git init command creates it by default and most people don’t bother to change it.

You can also create and switch to new branches. Also, you can switch between branches and merge local branches together. 

Switching branches changes files in your working directory

It’s important to note that when you switch branches in Git, files in your working directory will change. If you switch to an older 
branch, your working directory will be reverted to look like it did the last time you committed on that branch. If Git cannot do it 
cleanly, it will not let you switch at all.

Let’s go through a simple example of branching and merging with a workflow that you might use in the real world. You’ll follow these 
steps:
  Do work on a web site.
  Create a branch for a new story you’re working on.
  Do some work in that branch.
  
At this stage, you’ll receive a call that another issue is critical and you need a hotfix. You’ll do the following:
  Switch to your production branch.
  Create a branch to add the hotfix.
  After it’s tested, merge the hotfix branch, and push to production.
  Switch back to your original story and continue working.

If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in “Advanced Merging” 
(http://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_advanced_merging).

“origin” is not special
Just like the branch name “master” does not have any special meaning in Git, neither does “origin”. While “master” is the default name 
for a starting branch when you run git init which is the only reason it’s widely used, “origin” is the default name for a remote when 
you run git clone. If you run git clone -o booyah instead, then you will have booyah/master as your default remote branch.

Don’t type your password every time
If you’re using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication. By default it 
will prompt you on the terminal for this information so the server can tell if you’re allowed to push.

If you don’t want to type it every single time you push, you can set up a “credential cache”. The simplest is just to keep it in memory 
for a few minutes, which you can easily set up by running git config --global credential.helper cache.

For more information on the various credential caching options available, see “Credential Storage” 
(http://git-scm.com/book/en/v2/Git-Tools-Credential-Storage#_credential_caching).

Upstream shorthand

When you have a tracking branch set up, you can reference it with the @{upstream} or @{u} shorthand. So if you’re on the master branch and 
it’s tracking origin/master, you can say something like git merge @{u} instead of git merge origin/master if you wish.

By pushing your branches to a shared server, you are able to share your branches. Working with others on shared branches 
also works.

We’ve covered basic branching and merging in Git. You should feel comfortable creating and switching to new branches, switching between 
branches and merging local branches together. You should also be able to share your branches by pushing them to a shared server, working 
with others on shared branches and rebasing your branches before they are shared. Next, we’ll cover what you’ll need to run your own Git 
repository-hosting server.
